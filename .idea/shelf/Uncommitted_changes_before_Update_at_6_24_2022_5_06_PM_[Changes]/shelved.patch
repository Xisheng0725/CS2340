Index: src/main/java/com/cs2340/cs2340/MainPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cs2340.cs2340;\r\n\r\nimport javafx.animation.FadeTransition;\r\nimport javafx.application.Application;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.ImagePattern;\r\nimport javafx.scene.shape.Circle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport javafx.scene.paint.Color;\r\n\r\nimport static javafx.application.Platform.exit;\r\n\r\n/**\r\n *Represents MainPage named MainPage.\r\n *@author Xisheng Zhang, Qihui Wang, Porter Zach, Xueqing Li, and Shane Sinnerine.\r\n *@version 1.0.\r\n */\r\npublic class MainPage extends Application {\r\n\r\n    private static Scene selectScene;\r\n    private static Button tempBackBtn;\r\n\r\n    private static ColorPage colorPage = new ColorPage();\r\n\r\n    /**\r\n     * Create the main method.\r\n     * Please add commons or JavaDocs description when you add something\r\n     * @param args take in\r\n     */\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Create the start method that using for main page GUI.\r\n     * @param primaryStage take in\r\n     */\r\n    public void start(Stage primaryStage) {\r\n\r\n        //Create all objects to be placed on home screen.\r\n        Button homeStartBtn = new Button(\"Start game\");\r\n        StackPane homeMain = new StackPane();\r\n        homeMain.setStyle(\"-fx-background-color: azure\");\r\n        BorderPane homeBP = new BorderPane();\r\n        ImageView homeTitle = getImageView(\"/royale2.PNG\", 350, 700);\r\n        ImageView icons = getImageView(\"/icons.PNG\", 400, 900);\r\n        Button exitBtn = new Button(\"Exit\");\r\n\r\n\r\n        //Create and format homeScreen\r\n        formatHomeScreen(homeStartBtn, homeMain, homeBP, homeTitle, icons, exitBtn);\r\n        Scene homeScene = new Scene(homeMain, 1200, 800);\r\n\r\n        \r\n        //Set up primary stage\r\n        primaryStage.setTitle(\"Casino Royale Deluxe\");\r\n        primaryStage.setScene(homeScene);\r\n\r\n        //Create objects needed for selection page.\r\n        StackPane selectMain = new StackPane();\r\n        selectMain.setStyle(\"-fx-background-color: azure\");\r\n        BorderPane selectBP = new BorderPane();\r\n        Button selectReturn = new Button(\"Return to Main Page\");\r\n        Button selectBsInfo = new Button(\"Instructions\");\r\n        Button selectBjInfo = new Button(\"Instructions\");\r\n        Button selectClrInfo = new Button(\"Instructions\");\r\n        HBox hbox = new HBox(100);\r\n        ImageView selectBsImageView = getImageView(\"/battleship.JPG\", 200, 250);\r\n        ImageView selectBjImageView = getImageView(\"/blackjack.JPG\", 200, 250);\r\n        ImageView selectClrImageView = getImageView(\"/color.JPG\", 200, 250);\r\n        ImageView selectionTitle = getImageView(\"/royale.PNG\", 250, 800);\r\n\r\n        //create and format selection scene\r\n        formatSelectScene(selectMain, selectBP, selectReturn, hbox, selectBsImageView, selectBjImageView, selectClrImageView, selectBsInfo, selectBjInfo, selectClrInfo, selectionTitle);\r\n        selectScene = new Scene(selectMain, 1200, 800);\r\n\r\n        //Create temporary construction scene\r\n        Text tempTxt = new Text(\"This page is under construction...\");\r\n        tempBackBtn = new Button(\"Return\");\r\n        BorderPane tempBP = new BorderPane();\r\n        tempBP.setCenter(tempTxt);\r\n        tempBP.setBottom(tempBackBtn);\r\n        tempBackBtn.setOnAction(e -> primaryStage.setScene(selectScene));\r\n        tempBP.setPadding(new Insets(20, 20, 20, 20));\r\n        Scene tempScene = new Scene(tempBP, 1200, 800);\r\n\r\n\r\n        // Create the Color Game game Page\r\n        BorderPane colorGame = new BorderPane();\r\n        StackPane colorGamePane = new StackPane();\r\n        Scene colorGameScene = new Scene(colorGamePane, 1200, 800);\r\n        Button gameReturnButton = new Button(\"Return\");\r\n        gameReturnButton.setOnAction(e -> primaryStage.setScene(selectScene));\r\n        ImageView colorGameTitle = getImageView(\"colorBack.PNG\", 800, 1200);\r\n        colorPage.formatGameScreen(colorGameScene, colorGamePane, colorGame, colorGameTitle, primaryStage);\r\n\r\n        //Create the color game instruction page\r\n        BorderPane colorBP = new BorderPane();\r\n        StackPane colorPane = new StackPane();\r\n        Scene colorScene = new Scene(colorPane, 1200, 800);\r\n        ImageView colorTitle = getImageView(\"color.PNG\", 800, 1200);\r\n        Button colorBackBtn = new Button(\"Return\");\r\n        colorBackBtn.setOnAction(e -> primaryStage.setScene(selectScene));\r\n\r\n        Button enterGame = new Button(\"Start Game\");\r\n        enterGame.setOnAction(e -> primaryStage.setScene(colorGameScene));\r\n        ColorPage.formatColorScreen(colorScene, gameReturnButton, colorPane, colorBP, colorTitle, enterGame);\r\n\r\n        // setButton Style\r\n        gameButtonStyle(selectReturn, selectBsInfo, selectBjInfo, selectClrInfo, tempBackBtn, homeStartBtn);\r\n\r\n        //Home Screen event mapping\r\n        homeStartBtn.setOnAction(e -> primaryStage.setScene(selectScene));\r\n\r\n        //Selection screen event mapping\r\n        selectReturn.setOnAction(e -> primaryStage.setScene(homeScene));\r\n\r\n\r\n        // set animation and MouseClickedAction\r\n        selectBjImageView.setOnMouseClicked(new EventHandler<MouseEvent>(){\r\n            public void handle(MouseEvent event) {\r\n                FadeTransition fadeBj = new FadeTransition(Duration.millis(1500), selectBjImageView);\r\n                FadeTransition fadeClr = new FadeTransition(Duration.millis(1500), selectClrImageView);\r\n                fadeBj.setFromValue(10);\r\n                fadeBj.setToValue(0.1);\r\n                fadeBj.setCycleCount(2);\r\n                fadeBj.play();\r\n\r\n                fadeClr.setFromValue(10);\r\n                fadeClr.setToValue(1);\r\n                fadeClr.setCycleCount(1);\r\n                fadeClr.play();\r\n\r\n                fadeClr.setOnFinished(new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        fadeBj.stop();\r\n                        fadeClr.stop();\r\n                        primaryStage.setScene(tempScene);\r\n                    }\r\n                }) ;\r\n            }\r\n        });\r\n\r\n        // set animation and MouseClickedAction\r\n        selectBsImageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            public void handle(MouseEvent event2) {\r\n                FadeTransition fadeBS = new FadeTransition(Duration.millis(1500), selectBsImageView);\r\n                FadeTransition fadeClr = new FadeTransition(Duration.millis(1500), selectClrImageView);\r\n                fadeBS.setFromValue(10);\r\n                fadeBS.setToValue(0.1);\r\n                fadeBS.setCycleCount(2);\r\n                fadeBS.play();\r\n\r\n                fadeClr.setFromValue(10);\r\n                fadeClr.setToValue(1);\r\n                fadeClr.setCycleCount(1);\r\n                fadeClr.play();\r\n\r\n                fadeClr.setOnFinished(new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        fadeBS.stop();\r\n                        fadeClr.stop();\r\n                        primaryStage.setScene(tempScene);\r\n                    }\r\n                }) ;\r\n            }\r\n        });\r\n\r\n        // set animation and MouseClickedAction\r\n        selectClrImageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            public void handle(MouseEvent event3) {\r\n                FadeTransition fadeBj = new FadeTransition(Duration.millis(1500), selectBjImageView);\r\n                FadeTransition fadeClr = new FadeTransition(Duration.millis(1500), selectClrImageView);\r\n                fadeClr.setFromValue(10);\r\n                fadeClr.setToValue(0.1);\r\n                fadeClr.setCycleCount(2);\r\n                fadeClr.play();\r\n\r\n                fadeBj.setFromValue(10);\r\n                fadeBj.setToValue(1);\r\n                fadeBj.setCycleCount(1);\r\n                fadeBj.play();\r\n\r\n                fadeBj.setOnFinished(new EventHandler<ActionEvent>() {\r\n                    public void handle(ActionEvent e) {\r\n                        fadeBj.stop();\r\n                        fadeClr.stop();\r\n                        colorPage.resetClrGame(colorGameScene, primaryStage);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        selectBjInfo.setOnAction(e -> primaryStage.setScene(tempScene));\r\n        selectBsInfo.setOnAction(e -> primaryStage.setScene(tempScene));\r\n        selectClrInfo.setOnAction(e -> primaryStage.setScene(colorScene));\r\n\r\n        //Show primary stage\r\n        primaryStage.show();\r\n    }\r\n    /**\r\n     * change the button style.\r\n     * @param selectReturn Return button\r\n     * @param selectBsInfo Info button\r\n     * @param selectBjInfo Info Button\r\n     * @param selectClrInfo Info Button\r\n     * @param tempBackBtn Back Button\r\n     */\r\n    private void gameButtonStyle(Button selectReturn, Button selectBsInfo, Button selectBjInfo, Button selectClrInfo, Button tempBackBtn, Button homeStartBtn) {\r\n        String cssStyle = \" -fx-text-fill: #006464;\\n\" +\r\n                \"    -fx-background-color: #DFB951;\\n\" +\r\n                \"    -fx-border-radius: 20;\\n\" +\r\n                \"    -fx-background-radius: 20;\\n\" +\r\n                \"    -fx-padding: 5;\";\r\n        String cssForHome = \" -fx-text-fill: #006464;\\n\" +\r\n                \"    -fx-background-color: #DFB951;\\n\" +\r\n                \"    -fx-border-radius: 30;\\n\" +\r\n                \"    -fx-background-radius: 90;\\n\" +\r\n                \"    -fx-padding: 20;\\n\" +\r\n                \"    -fx-font-size: 20\";\r\n        homeStartBtn.setStyle(cssForHome);\r\n        selectReturn.setStyle((cssStyle));\r\n        selectBsInfo.setStyle((cssStyle));\r\n        selectBjInfo.setStyle((cssStyle));\r\n        selectClrInfo.setStyle((cssStyle));\r\n        tempBackBtn.setStyle((cssStyle));\r\n    }\r\n    /**\r\n     * change the layout of main page.\r\n     * @param main is a stackpane for main\r\n     * @param bp BoardPane\r\n     * @param retBtn return button\r\n     * @param bsInfo info button\r\n     * @param clrInfo info button\r\n     * @param hbox hbox\r\n     * @param bsIV image\r\n     * @param bjIV image\r\n     * @param clrIV image\r\n     * @param selectionTitle image\r\n     */\r\n    private void formatSelectScene(StackPane main, BorderPane bp, Button retBtn, HBox hbox, ImageView bsIV, ImageView bjIV,\r\n                                   ImageView clrIV, Button bsInfo, Button bjInfo, Button clrInfo, ImageView selectionTitle) {\r\n        VBox bsVBox = new VBox();\r\n        bsVBox.setSpacing(10);\r\n        bsVBox.getChildren().addAll(bsIV, bsInfo);\r\n        bsVBox.setAlignment(Pos.CENTER);\r\n\r\n        VBox bjVBox = new VBox();\r\n        bjVBox.setSpacing(10);\r\n        bjVBox.getChildren().addAll(bjIV, bjInfo);\r\n        bjVBox.setAlignment(Pos.CENTER);\r\n\r\n        VBox clrVBox = new VBox();\r\n        clrVBox.setSpacing(10);\r\n        clrVBox.getChildren().addAll(clrIV, clrInfo);\r\n        clrVBox.setAlignment(Pos.CENTER);\r\n\r\n        hbox.getChildren().addAll(bsVBox, bjVBox, clrVBox);\r\n        hbox.setAlignment(Pos.CENTER);\r\n\r\n        bp.setCenter(hbox);\r\n        bp.setTop(selectionTitle);\r\n        bp.setBottom(retBtn);\r\n        selectionTitle.setTranslateX(200);\r\n        selectionTitle.setTranslateY(25);\r\n        hbox.setTranslateY(-90);\r\n        retBtn.setTranslateX(30);\r\n        retBtn.setTranslateY(-30);\r\n        main.getChildren().addAll(bp);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param btnStart Start button\r\n     * @param homeScreen stackPane to create scene with\r\n     * @param homeBP borderpane to create home scene with\r\n     */\r\n    private void formatHomeScreen(Button btnStart, StackPane homeScreen, BorderPane homeBP, ImageView homeTitle, ImageView icons, Button exitBtn) {\r\n        //Add elements to home screen scene\r\n        VBox vbox = new VBox(15);\r\n\r\n        HBox buttonHBox = new HBox(40);\r\n        buttonHBox.getChildren().addAll(btnStart, exitBtn);\r\n\r\n        buttonHBox.setAlignment(Pos.CENTER);\r\n        vbox.getChildren().addAll(homeTitle, buttonHBox, icons);\r\n        vbox.setAlignment(Pos.CENTER);\r\n        homeBP.setCenter(vbox);\r\n        exitBtn.setStyle(\"-fx-background-color: #DFB951;\\n\" +\r\n        \"    -fx-border-radius: 30;\\n\" +\r\n                \"    -fx-background-radius: 90;\\n\" +\r\n                \"    -fx-padding: 20;\\n\" +\r\n                \"    -fx-font-size: 20\");\r\n        exitBtn.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                exit();\r\n            }\r\n        });\r\n        homeScreen.getChildren().addAll(homeBP);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Clears pinCOlors array\r\n     * @param pinColors array of current colors of all pins\r\n     */\r\n    private void clearPinColors(GTCColor[][] pinColors) {\r\n            pinColors = new GTCColor[8][4];\r\n            for(int i = 0; i < 8; i++) {\r\n                for(int j = 0; j <4; j++) {\r\n                    pinColors[i][j] = GTCColor.Empty;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    // helper for when user click return button, all the pin are clear\r\n    public void clearPin(Circle[][] pins) {\r\n        for (int i = 0; i < pins.length; i++) {\r\n            for (int j = 0; j < pins[i].length; j++) {\r\n                if (pins[i][j].getFill() != Color.GREY) {\r\n                    pins[i][j].setFill(Color.GREY);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // enter pin loop\r\n    public static void enterPin(Image tempImage, Circle[][] pins, GTCColor[][] pinColors, GTCColor tempColor) {\r\n        boolean check = false;\r\n        for (int i = 0; i < pins.length; i++) {\r\n            if (!check) {\r\n                for (int j = 0; j < pins[i].length; j++) {\r\n                    if (pins[i][j].getFill() == Color.GREY) {\r\n                        ColorPage.glow(pins[i][j]);\r\n                        pins[i][j].setFill(new ImagePattern(tempImage));\r\n                        pinColors[i][j] = tempColor;\r\n                        check = true;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param fileName name of image file to be loaded\r\n     * @param height height of image file for display\r\n     * @param width width of image file for display\r\n     * @return ImageView of image passed in with requested height and width\r\n     */\r\n    public static ImageView getImageView(String fileName, int height, int width) {\r\n        System.out.println(fileName);\r\n        Image image = new Image(fileName);\r\n        ImageView imageView = new ImageView(image);\r\n        imageView.setFitHeight(height);\r\n        imageView.setFitWidth(width);\r\n        return imageView;\r\n    }\r\n\r\n    // set button helper\r\n    public static void setButton(Button bt) {\r\n        String cssStyle = \" -fx-text-fill: #006464;\\n\" +\r\n                \"    -fx-background-color: #DFB951;\\n\" +\r\n                \"    -fx-border-radius: 20;\\n\" +\r\n                \"    -fx-background-radius: 20;\\n\" +\r\n                \"    -fx-padding: 5;\";\r\n        bt.setStyle(cssStyle);\r\n    }\r\n    public static void setText(Text tx) {\r\n        String cssStyle = \" -fx-text-fill: #006464;\\n\" +\r\n                \"        -fx-font-family: Comic Sans MS;\\n\" +\r\n                \"        -fx-font-size: 25px;\";\r\n        tx.setStyle(cssStyle);\r\n        Color c = Color.web(\"#006464\");\r\n        tx.setFill(c);\r\n    }\r\n\r\n    public Scene getSelectScene(){\r\n        return selectScene;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/cs2340/cs2340/MainPage.java b/src/main/java/com/cs2340/cs2340/MainPage.java
--- a/src/main/java/com/cs2340/cs2340/MainPage.java	(revision 859a242b8a32c3a0f9fc4f0043fa4cab9e433586)
+++ b/src/main/java/com/cs2340/cs2340/MainPage.java	(date 1656099009165)
@@ -329,16 +329,7 @@
 
 
 
-    // helper for when user click return button, all the pin are clear
-    public void clearPin(Circle[][] pins) {
-        for (int i = 0; i < pins.length; i++) {
-            for (int j = 0; j < pins[i].length; j++) {
-                if (pins[i][j].getFill() != Color.GREY) {
-                    pins[i][j].setFill(Color.GREY);
-                }
-            }
-        }
-    }
+
 
     // enter pin loop
     public static void enterPin(Image tempImage, Circle[][] pins, GTCColor[][] pinColors, GTCColor tempColor) {
Index: src/main/java/com/cs2340/cs2340/ColorPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cs2340.cs2340;\r\n\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.effect.Glow;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Circle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\n/**\r\n * The class that will create the menu and interface for the GTC game.\r\n */\r\npublic class ColorPage {\r\n\r\n    private static ColorGame colorLogic;\r\n    private static int gtcCounter;\r\n\r\n    private static ColorGame colorGameLogic = new ColorGame();\r\n\r\n    private static MainPage main= new MainPage();\r\n    public static void formatColorScreen(Scene colorScene, Button colorBackReturn, StackPane colorPane, BorderPane colorBP, ImageView colorTitle, Button enterGame) {\r\n        MainPage.setButton(colorBackReturn);\r\n\r\n        MainPage.setButton(enterGame);\r\n\r\n        HBox buttonHbox = new HBox(1030);\r\n        buttonHbox.getChildren().addAll(colorBackReturn, enterGame);\r\n        buttonHbox.setTranslateX(30);\r\n        buttonHbox.setTranslateY(-30);\r\n        colorBP.setBottom(buttonHbox);\r\n\r\n        Text instruction1 = new Text(\"1. Players should try to correctly guess the color and its corresponding position\\n \" +\r\n                \"   in the blind box in 8 rounds of guessing.\");\r\n        main.setText(instruction1);\r\n        Text instruction2 = new Text(\"2. At the end of a round of guessing, the result will be displayed.\");\r\n        main.setText(instruction2);\r\n        Text instruction3 = new Text(\"3. Green means the color and position are correct\");\r\n        main.setText(instruction3);\r\n        Text instruction4 = new Text(\"4. Red means the color is right but the position is wrong.\");\r\n        main.setText(instruction4);\r\n        Text instruction5 = new Text(\"5. No color means the color is not in the blind box\");\r\n        main.setText(instruction5);\r\n        Text instruction6 = new Text(\"Examples are shown below.\");\r\n        main.setText(instruction6);\r\n        VBox vText = new VBox(17);\r\n        vText.getChildren().addAll(instruction1, instruction2, instruction3, instruction4, instruction5, instruction6);\r\n        vText.setTranslateX(180);\r\n        vText.setTranslateY(178);\r\n\r\n\r\n        VBox example1 = new VBox(1);\r\n        ImageView instructionImage1 =  main.getImageView(\"2half2not.png\", 135, 135);\r\n        Text explain1 = new Text(\"Red: correct color but wrong position. \\n\" + \"White: wrong color and wrong position.\");\r\n        main.setText(explain1);\r\n        explain1.setStyle(\"-fx-font-size: 15px\");\r\n        example1.getChildren().addAll(explain1, instructionImage1);\r\n        VBox example2 = new VBox(1);\r\n        ImageView instructionImage2 =  main.getImageView(\"2full2not.png\", 135, 135);\r\n        Text explain2 = new Text(\"Green: correct color and correct position. \\n\" + \"White: wrong color and wrong position.\");\r\n        main.setText(explain2);\r\n        explain2.setStyle(\"-fx-font-size: 15px\");\r\n        example2.getChildren().addAll(explain2, instructionImage2);\r\n        HBox instruction = new HBox(21);\r\n        instruction.getChildren().addAll(example1, example2);\r\n        instruction.setTranslateX(150);\r\n        instruction.setTranslateY(563);\r\n\r\n\r\n        colorPane.getChildren().addAll(colorTitle, instruction, vText, colorBP);\r\n\r\n    }\r\n\r\n    public static void glow(Node color) {\r\n        Glow glow = new Glow();\r\n        color.setEffect(glow);\r\n        glow.setLevel(0);\r\n        color.setOnMouseEntered(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(colorGameLogic.hasWon() || colorGameLogic.hasLost()) {\r\n                    return;\r\n                }\r\n                glow.setLevel(0.5);\r\n            }\r\n        });\r\n        color.setOnMouseExited(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(colorGameLogic.hasWon() ||colorGameLogic.hasLost()) {\r\n                    return;\r\n                }\r\n                glow.setLevel(0);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Logic for when game ends\r\n     * @param colorGameLogic statistics of game\r\n     */\r\n    public void colorGameEnd(ColorGame colorGameLogic, ImageView checkHead, StackPane colorGamePane, Stage primaryStage,\r\n                                    Circle[][] pins, GTCColor[][] pinColors, Scene colorGameScene, VBox grey) {\r\n\r\n        //Styling for buttons\r\n        String cssStyle = \" -fx-text-fill: #006464;\\n\" +\r\n                \"    -fx-background-color: #DFB951;\\n\" +\r\n                \"    -fx-border-radius: 30;\\n\" +\r\n                \"    -fx-background-radius: 30;\\n\" +\r\n                \"    -fx-padding: 10;\\n\" +\r\n                \"    -fx-font-size:40;\";\r\n\r\n        //Decide image based on outcome of game\r\n        ImageView GTCOutcome;\r\n        if(colorGameLogic.hasWon()) {\r\n            GTCOutcome = main.getImageView(\"SubmitWin.png\", 500, 500);\r\n        } else {\r\n            GTCOutcome = main.getImageView(\"SubmitLoss.png\", 500, 500);\r\n        }\r\n\r\n        //Setup return button\r\n        Button GTCReturnBtn = new Button(\"Return\");\r\n        GTCReturnBtn.setStyle(cssStyle);\r\n        GTCReturnBtn.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                primaryStage.setScene(main.getSelectScene());\r\n            }\r\n        });\r\n\r\n        HBox GTCOptions = new HBox();\r\n\r\n        //Setup replay button\r\n        Button replayBtn = new Button(\"Replay\");\r\n        replayBtn.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                resetClrGame(colorGameScene, primaryStage);\r\n            }\r\n        });\r\n\r\n        //Format buttons\r\n        replayBtn.setStyle(cssStyle);\r\n        GTCOptions.getChildren().addAll(replayBtn, GTCReturnBtn);\r\n        GTCOptions.setSpacing(40);\r\n        GTCOptions.setTranslateX(475);\r\n        GTCOptions.setTranslateY(500);\r\n        GTCOutcome.setTranslateY(-150);\r\n        GTCOutcome.setTranslateX(-50);\r\n\r\n        //Display answer\r\n        GTCColor[] blind = colorGameLogic.getBlind();\r\n        int i = 0;\r\n        for(Node child :grey.getChildren()) {\r\n            ImageView greyImage = (ImageView) child;\r\n            String imageName = blind[i].getColor() + \".png\";\r\n            greyImage.setImage(new Image(imageName));\r\n            i++;\r\n        }\r\n        //Fade out background when game ends\r\n        for(Node child : colorGamePane.getChildren()) {\r\n            child.setOpacity(0.5);\r\n        }\r\n        colorGamePane.getChildren().addAll(GTCOutcome, GTCOptions);\r\n    }\r\n\r\n\r\n    /**\r\n     * Resets the colour game\r\n     * @param colorGameScene previous color game scene used\r\n     * @param primaryStage primary stage of application\r\n     */\r\n\r\n    public void resetClrGame(Scene colorGameScene, Stage primaryStage) {\r\n        colorGameLogic = new ColorGame();\r\n        BorderPane colorGame = new BorderPane();\r\n        StackPane colorGamePane = new StackPane();\r\n        colorGameScene = new Scene(colorGamePane, 1200, 800);\r\n        Button gameReturnButton = new Button(\"Return\");\r\n        gameReturnButton.setOnAction(e -> primaryStage.setScene(main.getSelectScene()));\r\n        ImageView colorGameTitle = main.getImageView(\"colorBack.PNG\", 800, 1200);\r\n        formatGameScreen(colorGameScene, colorGamePane, colorGame, colorGameTitle, primaryStage);\r\n        primaryStage.setScene(colorGameScene);\r\n    }\r\n\r\n    public void formatGameScreen(Scene colorGameScene, StackPane colorGamePane, BorderPane colorGame, ImageView colorGameTitle, Stage primaryStage) {\r\n        gtcCounter = 0;\r\n        Button colorBackBtn = new Button(\"Return\");\r\n        main.setButton(colorBackBtn);\r\n        colorBackBtn.setTranslateX(30);\r\n        colorBackBtn.setTranslateY(-30);\r\n        colorGame.setBottom(colorBackBtn);\r\n        ImageView gamePosition = main.getImageView(\"gp.png\", 785, 1300);\r\n\r\n        VBox imageCheckHead = new VBox();\r\n        ImageView checkHead = main.getImageView(\"submit1.png\", 300, 300);\r\n        imageCheckHead.getChildren().addAll(checkHead);\r\n        imageCheckHead.setTranslateX(770);\r\n        imageCheckHead.setTranslateY(500);\r\n\r\n        //Glow effect for image on mouse hover\r\n        Glow glow = new Glow();\r\n        glow.setLevel(0);\r\n        imageCheckHead.setEffect(glow);\r\n        imageCheckHead.setOnMouseEntered(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(colorGameLogic.hasWon() || colorGameLogic.hasLost()) {\r\n                    return;\r\n                }\r\n                glow.setLevel(0.8);\r\n            }\r\n        });\r\n        imageCheckHead.setOnMouseExited(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(colorGameLogic.hasWon() || colorGameLogic.hasLost()) {\r\n                    return;\r\n                }\r\n                glow.setLevel(0);\r\n            }\r\n        });\r\n\r\n        HBox title = new HBox();\r\n        ImageView title1 = main.getImageView(\"GTC Title.png\", 100, 500);\r\n        title.getChildren().addAll(title1);\r\n        title.setTranslateX(350);\r\n        title.setTranslateY(20);\r\n\r\n        VBox grey = new VBox(15);\r\n        ImageView grey1 = main.getImageView(\"gray.png\", 50, 50);\r\n        ImageView grey2 = main.getImageView(\"gray.png\", 50, 50);\r\n        ImageView grey3 = main.getImageView(\"gray.png\", 50, 50);\r\n        ImageView grey4 = main.getImageView(\"gray.png\", 50, 50);\r\n        grey.getChildren().addAll(grey1, grey2, grey3, grey4);\r\n        grey.setTranslateX(1025);\r\n        grey.setTranslateY(175);\r\n\r\n\r\n        HBox allColors = new HBox(40);\r\n        ImageView red = main.getImageView(\"red.png\", 50, 50);\r\n        Image redImage = new Image(\"red.png\");\r\n        ImageView orange = main.getImageView(\"orange.png\", 50, 50);\r\n        Image orangeImage = new Image(\"orange.png\");\r\n        ImageView yellow = main.getImageView(\"yellow.png\", 50, 50);\r\n        Image yellowImage = new Image(\"yellow.png\");\r\n        ImageView green = main.getImageView(\"green.png\", 50, 50);\r\n        Image greenImage = new Image(\"green.png\");\r\n        ImageView blue = main.getImageView(\"blue.png\", 50, 50);\r\n        Image blueImage = new Image(\"blue.png\");\r\n        ImageView purple = main.getImageView(\"purple.png\", 50, 50);\r\n        Image purpleImage = new Image(\"purple.png\");\r\n        allColors.getChildren().addAll(red, orange, yellow, green, blue, purple);\r\n        allColors.setTranslateX(140);\r\n        allColors.setTranslateY(610);\r\n\r\n\r\n\r\n        GridPane eachRound = new GridPane();\r\n        eachRound.setMinSize(700, 500);\r\n        eachRound.setHgap(60);\r\n        eachRound.setVgap(25);\r\n        Circle[][] pins = new Circle[8][4];\r\n        GTCColor[][] pinColors = new GTCColor[8][4];\r\n        int rows = 8;\r\n        int columns = 4;\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) {\r\n                pinColors[i][j] = GTCColor.Empty;\r\n                Circle circle = new Circle(20);\r\n                circle.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n                    @Override\r\n                    public void handle(MouseEvent mouseEvent) {\r\n                        if(circle.getFill() != Color.GREY) {\r\n                            gtcCounter--;\r\n                        }\r\n                        circle.setFill(Color.GREY);\r\n                    }\r\n                });\r\n                pins[i][j] = circle;\r\n                circle.setFill(Color.GREY);\r\n                eachRound.add(pins[i][j], i, j);\r\n            }\r\n            ImageView fourNotIV = main.getImageView(\"4not.png\", 50 ,50);\r\n            fourNotIV.setTranslateX(-5);\r\n            eachRound.add(fourNotIV, i, 4);\r\n        }\r\n\r\n        eachRound.setTranslateX(150);\r\n        eachRound.setTranslateY(180);\r\n        red.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image redImage = new Image(\"red.png\");\r\n                main.enterPin(redImage, pins, pinColors, GTCColor.Red);\r\n            }\r\n        });\r\n        orange.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image orangeImage = new Image(\"orange.png\");\r\n                main.enterPin(orangeImage, pins, pinColors, GTCColor.Orange);\r\n            }\r\n        });\r\n        yellow.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 ||colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image yellowImage = new Image(\"yellow.png\");\r\n                main.enterPin(yellowImage, pins, pinColors, GTCColor.Yellow);\r\n            }\r\n        });\r\n        green.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image greenImage = new Image(\"green.png\");\r\n                main.enterPin(greenImage, pins, pinColors, GTCColor.Green);\r\n            }\r\n        });\r\n        blue.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image blueImage = new Image(\"blue.png\");\r\n                main.enterPin(blueImage, pins, pinColors, GTCColor.Blue);\r\n            }\r\n        });\r\n        purple.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter == 4 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter++;\r\n                Image purpleImage = new Image(\"purple.png\");\r\n                main.enterPin(purpleImage, pins, pinColors, GTCColor.Purple);\r\n            }\r\n        });\r\n        colorBackBtn.setOnAction(new EventHandler<ActionEvent>() {\r\n            @Override\r\n            public void handle(ActionEvent actionEvent) {\r\n                main.clearPin(pins);\r\n                primaryStage.setScene(main.getSelectScene());\r\n            }\r\n        });\r\n\r\n        //Submit button logic\r\n        imageCheckHead.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if(gtcCounter != 4) {\r\n                    return;\r\n                }\r\n                if(colorGameLogic.getNumGuesses() >= 8 || colorGameLogic.hasWon()) {\r\n                    return;\r\n                }\r\n                gtcCounter = 0;\r\n                GTCColor[] guess = getGuess(pins, pinColors);\r\n                colorGameLogic.guess(guess);\r\n                ImageView hint = hintToIV(colorGameLogic.getHint());\r\n                hint.setTranslateX(-5);\r\n                eachRound.add(hint, colorGameLogic.getNumGuesses() - 1, 4);\r\n                if(colorGameLogic.hasLost() || colorGameLogic.hasWon()){\r\n                    colorGameEnd(colorGameLogic, checkHead, colorGamePane, primaryStage, pins,\r\n                            pinColors, colorGameScene, grey);\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        colorGamePane.getChildren().addAll(colorGameTitle, gamePosition, title, colorGame, eachRound,\r\n                grey, allColors, imageCheckHead);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding image for a hint and returns the associated ImageView\r\n     * @param hint latest hint\r\n     * @return IV of hint\r\n     */\r\n    public ImageView hintToIV(GTCColor[] hint) {\r\n        int full = 0;\r\n        int half = 0;\r\n        int not = 0;\r\n        for(int i = 0; i < hint.length; i++) {\r\n            if(hint[i].toString().equals(GTCColor.Hint_Correct.toString())) {\r\n                full++;\r\n            } else if(hint[i].toString().equals(GTCColor.Hint_WrongSpot.toString())) {\r\n                half++;\r\n            } else if(hint[i].toString().equals(GTCColor.Hint_Wrong.toString())) {\r\n                not++;\r\n            }\r\n        }\r\n        String imageName = \"\";\r\n        if(full != 0) {\r\n            imageName += String.valueOf(full) + \"full\";\r\n        }\r\n        if(half != 0) {\r\n            imageName += String.valueOf(half) + \"half\";\r\n        }\r\n        if(not != 0) {\r\n            imageName += String.valueOf(not) + \"not\";\r\n        }\r\n        imageName += \".png\";\r\n        return main.getImageView(imageName, 50, 50);\r\n    }\r\n\r\n    //Gets users guess\r\n    public GTCColor[] getGuess(Circle[][] pins, GTCColor[][] pinColors) {\r\n        int col = 0;\r\n        boolean found = false;\r\n        for(int i = 0; i < 8; i++) {\r\n            if(pins[i][3].getFill() == Color.GREY) {\r\n                col = i - 1;\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if(found == false) {\r\n            col = 7;\r\n        }\r\n        GTCColor[] guess = new GTCColor[4];\r\n        for(int i = 0; i < 4; i++) {\r\n            guess[i] = pinColors[col][i];\r\n        }\r\n        return guess;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/cs2340/cs2340/ColorPage.java b/src/main/java/com/cs2340/cs2340/ColorPage.java
--- a/src/main/java/com/cs2340/cs2340/ColorPage.java	(revision 859a242b8a32c3a0f9fc4f0043fa4cab9e433586)
+++ b/src/main/java/com/cs2340/cs2340/ColorPage.java	(date 1656104100240)
@@ -1,5 +1,6 @@
 package com.cs2340.cs2340;
 
+import javafx.collections.ObservableList;
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
 import javafx.scene.Node;
@@ -274,22 +275,24 @@
             for (int j = 0; j < columns; j++) {
                 pinColors[i][j] = GTCColor.Empty;
                 Circle circle = new Circle(20);
-                circle.setOnMouseClicked(new EventHandler<MouseEvent>() {
-                    @Override
-                    public void handle(MouseEvent mouseEvent) {
-                        if(circle.getFill() != Color.GREY) {
-                            gtcCounter--;
-                        }
-                        circle.setFill(Color.GREY);
-                    }
-                });
+                ImageView fourNotIV = main.getImageView("4not.png", 50 ,50);
+                fourNotIV.setTranslateX(-5);
+                eachRound.add(fourNotIV, i, 4);
+                    circle.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                        @Override
+                        public void handle(MouseEvent mouseEvent) {
+
+                            if(circle.getFill() != Color.GREY) {
+                                gtcCounter--;
+                            }
+                            circle.setFill(Color.GREY);
+                        }
+                    });
+
                 pins[i][j] = circle;
                 circle.setFill(Color.GREY);
                 eachRound.add(pins[i][j], i, j);
             }
-            ImageView fourNotIV = main.getImageView("4not.png", 50 ,50);
-            fourNotIV.setTranslateX(-5);
-            eachRound.add(fourNotIV, i, 4);
         }
 
         eachRound.setTranslateX(150);
@@ -363,7 +366,7 @@
         colorBackBtn.setOnAction(new EventHandler<ActionEvent>() {
             @Override
             public void handle(ActionEvent actionEvent) {
-                main.clearPin(pins);
+                clearPin(pins);
                 primaryStage.setScene(main.getSelectScene());
             }
         });
@@ -395,6 +398,8 @@
                 grey, allColors, imageCheckHead);
     }
 
+
+
     /**
      * Gets the corresponding image for a hint and returns the associated ImageView
      * @param hint latest hint
@@ -447,4 +452,17 @@
         }
         return guess;
     }
+
+    // helper for when user click return button, all the pin are clear
+    public void clearPin(Circle[][] pins) {
+        for (int i = 0; i < pins.length; i++) {
+            for (int j = 0; j < pins[i].length; j++) {
+                if (pins[i][j].getFill() != Color.GREY) {
+                    pins[i][j].setFill(Color.GREY);
+                }
+            }
+        }
+    }
+
+
 }
Index: .idea/runConfigurations.xml
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	(revision 859a242b8a32c3a0f9fc4f0043fa4cab9e433586)
+++ /dev/null	(revision 859a242b8a32c3a0f9fc4f0043fa4cab9e433586)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
